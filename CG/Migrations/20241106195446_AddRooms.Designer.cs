// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CG.Domain;

#nullable disable

namespace test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106195446_AddRooms")]
    partial class AddRooms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("test.Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("test.Domain.Entities.WebinarFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OfferThumbNail")
                        .HasColumnType("bit");

                    b.Property<int>("TypeWebinarFiles")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebinarId");

                    b.ToTable("WebinarFiles");
                });

            modelBuilder.Entity("CG.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "trainer",
                            NormalizedName = "TRAINER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChessTitle")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DismissDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndStudy")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreviewTrainerPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartStudy")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trophy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("YearReceiveTitle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Avatar = "avatar-3.jpg",
                            ConcurrencyStamp = "551789c3-79af-427d-96e4-1286462298d5",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Максим",
                            NormalizedEmail = "ADMIN@ADMIN.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHBfNypMRuP7LG5FkH7pT1lGiexcG897zZdyZu/8df807jdzx4lH20I0+cWJD5+lHA==",
                            Patronymic = "Владимирович",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            Surname = "Королёв",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Avatar = "avatar-3.jpg",
                            City = "Ставрополь",
                            ConcurrencyStamp = "99acefe1-cac3-4aef-a8b5-68bfb1b0a694",
                            Country = "Россия",
                            DateBirthday = new DateTime(1983, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Максим",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER1",
                            PasswordHash = "AQAAAAIAAYagAAAAELthBqc91NotQ7Y2jEAjuU2psNY0AHS3cORk347iX4lBhFphyhJhDVboZrahXuZ7iQ==",
                            Patronymic = "Владимирович",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-6.jpg",
                            Profile = "team-9.jpg",
                            Region = "Ставропольский край",
                            SecurityStamp = "",
                            Sex = 0,
                            Surname = "Королёв",
                            TwoFactorEnabled = false,
                            UserName = "trainer1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Avatar = "avatar-1.jpg",
                            ChessTitle = 7,
                            City = "Краснодар",
                            ConcurrencyStamp = "d2de32c6-2fac-45ed-a38c-505b6e580a00",
                            Country = "Россия",
                            DateBirthday = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Майя",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtPoMTHrTyIdjlf7j5jDaLHOgmW9hIGzgGrkUmvq3obmJ8cNz6zF+B1TEVkofyo+w==",
                            Patronymic = "Владимировна",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-4.jpg",
                            Profile = "team-7.jpg",
                            Region = "Краснодарский край",
                            SecurityStamp = "",
                            Sex = 1,
                            Surname = "Порожняк",
                            TrainerPhoto = "trainer-1-3.jpg",
                            Trophy = "Чемпионка Краснодарского края 2022 года",
                            TwoFactorEnabled = false,
                            UserName = "trainer2"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Avatar = "avatar-2.jpg",
                            City = "Ростов-на-Дону",
                            ConcurrencyStamp = "dcd63034-4673-48c3-b2e3-167770543d9c",
                            Country = "Россия",
                            DateBirthday = new DateTime(1984, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Мурат",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAB5BhEF82anB6I+yKgi6udJpFxElBdrTLhFrbmgpzAcKt9wqmoMqomYNeHdj/siw==",
                            Patronymic = "Муратович",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-5.jpg",
                            Profile = "team-8.jpg",
                            Region = "Ростовская область",
                            SecurityStamp = "",
                            Sex = 0,
                            Stage = 10,
                            Surname = "Болотчиев",
                            TrainerPhoto = "trainer-1-4.jpg",
                            TwoFactorEnabled = false,
                            UserName = "trainer3"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e95532b3-e2b0-476c-a4ae-3ac56634d411",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@user.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.RU",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECtivW/jZI8Ad6YUOJ3t3rJbk9KrZzgTuPgPd3uqBcmTfrGwoTPOvJlmojMdoS6zaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            City = "Краснодар",
                            ConcurrencyStamp = "0cf8230f-0cee-418c-aa45-787d0b66b9fe",
                            Country = "Россия",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "name",
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEMheMxTSux9u14EsN2VRHWXC2WOD1mrNvZA3jD86BMNYwLBRhc6zkGvQipBsgS8CVQ==",
                            PhoneNumberConfirmed = false,
                            Region = "Краснодарский край",
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34555710-2269-4dce-88e3-f9bda307caba",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEDN7rAn6sgPnPXgmtRr+zwXQvoquif0KnAiu1NFPPW50xY0SVJD0FLMz+U9dIOXj+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5952fa7-855f-4745-baac-01c11596bbe7",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+nqjeC/ZbLeYNpulRarlo5lLZCHOUGz1FOhPV4HVBPu4Hq9rFPQHaz2v5DtWVkyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student3"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "382ba878-1ced-43e3-bb2d-2fec32cc9baf",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEBL7RTWAbRBk1Hmt2pIjg7jKprE9nNMIqRAVPT3nXRwg+IImqK5bx4QTdDMIE94DFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student4"
                        });
                });

            modelBuilder.Entity("CG.Domain.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterPreviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ChapterVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavigationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterPreviewId");

                    b.HasIndex("ChapterVideoId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5004),
                            Description = "Прослушав курс вы поймете основные идеи данного гамбита, и историю возникновения. Узнаете кто из современников играет этот дебют.\r\n                                        Научитесь играть в комбинационные активные шахматы.",
                            Header = "",
                            Name = "Принятый северный гамбит",
                            NavigationTitle = "Основная идея гамбита"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5022),
                            Description = "Обсуждается возможный план игры в миттельшпиле. Основные плюсы и минусы данного дебюта.",
                            Header = "Глубокий разбор основных линий в дебюте, последнии новинки.",
                            Name = "Основные варианты дебюта",
                            NavigationTitle = "Основные варианты"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5037),
                            Description = "Расматривается основные возражения против северного гамбита. Способы уйти в удобные для черных линии.Обсуждается возможный план игры в миттельшпиле.",
                            Header = "",
                            Name = "Отказанный северный гамбит",
                            NavigationTitle = "Как защищаться черным в северном гамбите"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTimeCourse")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Purchases")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeCourse")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeCourse")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4594),
                            Currency = 0,
                            Description = "Один из острейших дебютов в шахматах, так как там с первых же ходов жертвуются две пешки. В данном видео рассматриваются ловушки за белых и черных, \r\n                        которых так много в представленном дебютном варианте. Изучив их, вы сможете вылавливать тех соперников, которые слабо знакомы с тонкостями \r\n                        Северного гамбита. К тому же многие из этих ловушек очень красивы, поэтому даже если вы не собираетесь применять данный вариант на практике, то все \r\n                        равно получите незабываемое эстетическое удовольствие от просмотра этого ролика.",
                            Duration = 120,
                            EndTimeCourse = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Северный гамбит",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeCourse = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeCourse = 0,
                            Views = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4626),
                            Currency = 0,
                            Description = "В курсе рассказывается как ставить ловушки в северном гамбите",
                            Duration = 60,
                            EndTimeCourse = new DateTime(2024, 8, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Ловушки в северном гамбите",
                            Price = 125m,
                            Purchases = 30,
                            StartTimeCourse = new DateTime(2024, 8, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeCourse = 0,
                            Views = 50
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ChapterId = 2,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ChapterId = 3,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OfferThumbNail")
                        .HasColumnType("bit");

                    b.Property<int>("TypeCourseFiles")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseFiles");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectoryCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "ffbb2c",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4017),
                            Description = "",
                            Icon = "book",
                            IsActive = true,
                            ListOrder = 1,
                            Name = "Основы шахмат",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            Color = "5578ff",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4095),
                            Description = "",
                            Icon = "door-open",
                            IsActive = true,
                            ListOrder = 2,
                            Name = "Дебют",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            Color = "e80368",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4113),
                            Description = "",
                            Icon = "medium",
                            IsActive = true,
                            ListOrder = 3,
                            Name = "Миттельшпиль",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            Color = "e361ff",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4130),
                            Description = "",
                            Icon = "door-closed",
                            IsActive = true,
                            ListOrder = 4,
                            Name = "Эндшпиль",
                            Url = ""
                        },
                        new
                        {
                            Id = 5,
                            Color = "47aeff",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4145),
                            Description = "",
                            Icon = "shuffle",
                            IsActive = true,
                            ListOrder = 5,
                            Name = "Стратегия",
                            Url = ""
                        },
                        new
                        {
                            Id = 6,
                            Color = "ffa76e",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4162),
                            Description = "",
                            Icon = "star",
                            IsActive = true,
                            ListOrder = 6,
                            Name = "Тактика",
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            Color = "11dbcf",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4178),
                            Description = "",
                            Icon = "stop-circle-fill",
                            IsActive = true,
                            ListOrder = 7,
                            Name = "Матовые конструкции",
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            Color = "4233ff",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4194),
                            Description = "",
                            Icon = "stop-circle",
                            IsActive = true,
                            ListOrder = 8,
                            Name = "Патовые конструкции",
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            Color = "b2904f",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4211),
                            Description = "",
                            Icon = "textarea-t",
                            IsActive = true,
                            ListOrder = 9,
                            Name = "Тактические приемы",
                            Url = ""
                        },
                        new
                        {
                            Id = 10,
                            Color = "b20969",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4229),
                            Description = "",
                            Icon = "people-fill",
                            IsActive = true,
                            ListOrder = 10,
                            Name = "Чемпионы мира",
                            Url = ""
                        },
                        new
                        {
                            Id = 11,
                            Color = "ff5828",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4245),
                            Description = "",
                            Icon = "stack",
                            IsActive = true,
                            ListOrder = 11,
                            Name = "Литература",
                            Url = ""
                        },
                        new
                        {
                            Id = 12,
                            Color = "29cc61",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4260),
                            Description = "",
                            Icon = "list-task",
                            IsActive = true,
                            ListOrder = 12,
                            Name = "Задачи",
                            Url = ""
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryStatusCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DirectoryStatusCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4287),
                            Description = "",
                            ListOrder = 1,
                            Name = "Опубликован"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4307),
                            Description = "",
                            ListOrder = 2,
                            Name = "В разработке"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4369),
                            Description = "",
                            ListOrder = 3,
                            Name = "На модерации"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4390),
                            Description = "",
                            ListOrder = 4,
                            Name = "Одобрен"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4549),
                            Description = "",
                            ListOrder = 5,
                            Name = "В продаже"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4567),
                            Description = "",
                            ListOrder = 6,
                            Name = "В архиве"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CG.Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5144),
                            Description = "Занимается онлайн года 4,5 точно. Тренеры Майя Порожняк и Мурат Болотчиев ❤️❤️❤️самые лучшие тренера! Активные, позитивные, интересные!",
                            Image = "testimonials-1.jpg",
                            ListOrder = 1,
                            Name = "Виктория Нос",
                            Rating = 5,
                            Title = "Мама ученика"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5166),
                            Description = "Сын занимается около полугода, очень доволен!\r\n                                    На урок всегда идет с удовольвствием. Тренеру Максиму Королёву - отдельная благодарность!",
                            Image = "testimonials-2.jpg",
                            ListOrder = 2,
                            Name = "Иван Савелов",
                            Rating = 5,
                            Title = "Отец ученика"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5182),
                            Description = "Занимается онлайн года 4,5 точно. Тренеры Майя Порожняк и Мурат Болотчиев ❤️❤️❤️самые лучшие тренера! Активные, позитивные, интересные!",
                            Image = "testimonials-3.jpg",
                            ListOrder = 3,
                            Name = "Виктория Нос",
                            Rating = 5,
                            Title = "Мама ученика"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5197),
                            Description = "Мой сын начал заниматься в шахматной школе почти год назад и мы просто в восторге от результатов! Каждое занятие не только увлекательно, но и полезно.",
                            Image = "testimonials-4.jpg",
                            ListOrder = 4,
                            Name = "Yana",
                            Rating = 4,
                            Title = "Мать ученика"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5212),
                            Description = "Рекомендую школу шахмат!\r\n                                    Там работают самые добрые , умные люди !",
                            Image = "testimonials-5.jpg",
                            ListOrder = 5,
                            Name = "Светлана Лацерда",
                            Rating = 5,
                            Title = "Ученица"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5228),
                            Description = "Это просто ужасно!Ужасный дебют, как можно такой дебют рекомендовать играть своим ученикам. ",
                            Image = "testimonials-5.jpg",
                            ListOrder = 6,
                            Name = "Денис Медведев",
                            Rating = 1,
                            Title = "Приобрел курс по дебюту Дамиано"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TariffsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffsId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4705),
                            Description = "Пробный урок",
                            Name = "Пробный урок"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4724),
                            Description = "Доступ к открытым курсам",
                            Name = "Доступ к открытым курсам"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4739),
                            Description = "Доступ к открытым вебинарам",
                            Name = "Доступ к открытым вебинарам"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4753),
                            Name = "Доступ к закрытым курсам"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4861),
                            Description = "Доступ к закрытым курсам",
                            Name = "Доступ к закрытым вебинарам"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4878),
                            Description = "Доступ к закрытым вебинарам, 10 вебинаров в месяц длительность 1 час 30 мин.",
                            Name = "Доступ к закрытым вебинарам, 10 вебинаров в месяц длительность 1 час 30 мин."
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4893),
                            Description = "Доступ к индивидуальным занятиям 10 занятий в месяц длительность 1 час 30 мин.",
                            Name = "Доступ к индивидуальным занятиям 10 занятий в месяц длительность 1 час 30 мин."
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(5251),
                            Description = "Заголовок на главной странице на первом баннере",
                            Key = "HeaderMain",
                            Name = "Главный заголовок",
                            Section = "Headers",
                            Value = "Шахматная школа"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.StudentsTrainers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentsTrainers");
                });

            modelBuilder.Entity("CG.Domain.Entities.Tariffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdvanced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceMonth")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceYear")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicesIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4924),
                            Description = "Бесплатно",
                            IsAdvanced = false,
                            IsFeatured = false,
                            Name = "Бесплатно",
                            PriceMonth = 0m,
                            ServicesIds = "1;2;3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4946),
                            Description = "Самостоятельное обучение",
                            IsAdvanced = false,
                            IsFeatured = true,
                            Name = "Самостоятельное обучение",
                            PriceMonth = 3000m,
                            ServicesIds = "1;2;3;4;5"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4965),
                            Description = "Групповые занятия",
                            IsAdvanced = false,
                            IsFeatured = false,
                            Name = "Групповые занятия",
                            PriceMonth = 7000m,
                            ServicesIds = "1;2;3;4;5;6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4981),
                            Description = "Индивидуальные занятия",
                            IsAdvanced = true,
                            IsFeatured = false,
                            Name = "Индивидуальные занятия",
                            PriceMonth = 12000m,
                            ServicesIds = "1;2;3;4;5;6;7"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTimeWebinar")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Purchases")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeWebinar")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeAccess")
                        .HasColumnType("int");

                    b.Property<int>("TypeWebinar")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Webinars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 30,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4655),
                            Currency = 0,
                            Description = "Майя Порожняк расскажет вам про один из самых романтических дебютов в Шахматной Истории, о северном гамбите, дебют, где белые жертвуют две пешки ради развития сверхмощной инициативы.",
                            Duration = 120,
                            EndTimeWebinar = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Северный гамбит",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeWebinar = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeAccess = 0,
                            TypeWebinar = 0,
                            Views = 50
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 30,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 54, 45, 54, DateTimeKind.Utc).AddTicks(4681),
                            Currency = 0,
                            Description = "Роль шахмат в развитии интуиции и творческого мышления учащихся",
                            Duration = 120,
                            EndTimeWebinar = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Шахматная интуиция",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeWebinar = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeAccess = 0,
                            TypeWebinar = 0,
                            Views = 50
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test.Domain.Entities.WebinarFiles", b =>
                {
                    b.HasOne("CG.Domain.Entities.Webinar", "Webinar")
                        .WithMany("WebinarFiles")
                        .HasForeignKey("WebinarId");

                    b.Navigation("Webinar");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.HasOne("CG.Domain.Entities.StudentsTrainers", null)
                        .WithMany("Students")
                        .HasForeignKey("StudentId");

                    b.HasOne("CG.Domain.Entities.StudentsTrainers", null)
                        .WithMany("Trainers")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUserRole", b =>
                {
                    b.HasOne("CG.Domain.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CG.Domain.Entities.Chapters", b =>
                {
                    b.HasOne("CG.Domain.Entities.CourseFiles", "ChapterPreview")
                        .WithMany()
                        .HasForeignKey("ChapterPreviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Chapters_PreviewCourseFiles_FK1");

                    b.HasOne("CG.Domain.Entities.CourseFiles", "ChapterVideo")
                        .WithMany()
                        .HasForeignKey("ChapterVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Chapters_VideoCourseFiles_FK1");

                    b.Navigation("ChapterPreview");

                    b.Navigation("ChapterVideo");
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.HasOne("CG.Domain.Entities.DirectoryCategory", "DirectoryCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.DirectoryStatusCourses", "DirectoryStatusCourses")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId");

                    b.Navigation("DirectoryCategory");

                    b.Navigation("DirectoryStatusCourses");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseDetails", b =>
                {
                    b.HasOne("CG.Domain.Entities.Chapters", "Chapters")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapters");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseFiles", b =>
                {
                    b.HasOne("CG.Domain.Entities.Course", "Course")
                        .WithMany("CourseFiles")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CG.Domain.Entities.Service", b =>
                {
                    b.HasOne("CG.Domain.Entities.Tariffs", null)
                        .WithMany("Services")
                        .HasForeignKey("TariffsId");
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.HasOne("CG.Domain.Entities.DirectoryCategory", "DirectoryCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.DirectoryStatusCourses", "DirectoryStatusCourses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "Trainer")
                        .WithMany("Webinars")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectoryCategory");

                    b.Navigation("DirectoryStatusCourses");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CG.Domain.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserRoles");

                    b.Navigation("Webinars");
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("CourseFiles");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryStatusCourses", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CG.Domain.Entities.StudentsTrainers", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("CG.Domain.Entities.Tariffs", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.Navigation("WebinarFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
