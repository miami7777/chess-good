// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CG.Domain;

#nullable disable

namespace test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241203200633_AddNullableFieldsLichessProfile")]
    partial class AddNullableFieldsLichessProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("test.Domain.Entities.LichessUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PerfsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("createdat")
                        .HasColumnType("bigint");

                    b.Property<long>("seenat")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerfsId");

                    b.HasIndex("ProfileId");

                    b.ToTable("LichessUsers");
                });

            modelBuilder.Entity("test.Domain.Entities.PerfsLichess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlitzId")
                        .HasColumnType("int");

                    b.Property<int?>("BulletId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassicalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RapidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlitzId");

                    b.HasIndex("BulletId");

                    b.HasIndex("ClassicalId");

                    b.HasIndex("RapidId");

                    b.ToTable("perfsLichesses");
                });

            modelBuilder.Entity("test.Domain.Entities.PerfsStatisticsLichess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prog")
                        .HasColumnType("int");

                    b.Property<bool>("Prov")
                        .HasColumnType("bit");

                    b.Property<int>("RD")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("perfsStatisticsLichesses");
                });

            modelBuilder.Entity("test.Domain.Entities.ProfileLichess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fiderating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Realname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cfcRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dsbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ecfRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uscfRating")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("profileLichesses");
                });

            modelBuilder.Entity("test.Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("test.Domain.Entities.WebinarFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OfferThumbNail")
                        .HasColumnType("bit");

                    b.Property<int>("TypeWebinarFiles")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("WebinarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebinarId");

                    b.ToTable("WebinarFiles");
                });

            modelBuilder.Entity("CG.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "trainer",
                            NormalizedName = "TRAINER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChessTitle")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DismissDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndStudy")
                        .HasColumnType("datetime2");

                    b.Property<string>("LichessUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreviewTrainerPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLichess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartStudy")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trophy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("YearReceiveTitle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LichessUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Avatar = "avatar-3.jpg",
                            ConcurrencyStamp = "0f308846-77f5-41de-866a-e608db78e428",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Максим",
                            NormalizedEmail = "ADMIN@ADMIN.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL28XW8gn7Z4ozWVzSPR4KjHvcslcQ6wtEH08uUG9rHT0zKT3GG96lrgD/XhEGohvQ==",
                            Patronymic = "Владимирович",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            Surname = "Королёв",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Avatar = "avatar-3.jpg",
                            City = "Ставрополь",
                            ConcurrencyStamp = "2cfda902-f766-4fac-a89a-26c39ae6ba94",
                            Country = "Россия",
                            DateBirthday = new DateTime(1983, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Максим",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER1",
                            PasswordHash = "AQAAAAIAAYagAAAAENA+z0xb5HdPgWADzmJ+wHDsvqzbuJ+9ZGWtSEUWhzzRf28VtZHw8jMWEMemewDyEg==",
                            Patronymic = "Владимирович",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-6.jpg",
                            Profile = "team-9.jpg",
                            Region = "Ставропольский край",
                            SecurityStamp = "",
                            Sex = 0,
                            Surname = "Королёв",
                            TwoFactorEnabled = false,
                            UserName = "trainer1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Avatar = "avatar-1.jpg",
                            ChessTitle = 7,
                            City = "Краснодар",
                            ConcurrencyStamp = "9d246e1a-e477-4310-adac-73671c0466d5",
                            Country = "Россия",
                            DateBirthday = new DateTime(1998, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Майя",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKtgKGn+wq18zlv9eHJiSbxTP6/O0MouaJGgeRaYcz+bwzSYSBn6qM1CaSkxEz6lQ==",
                            Patronymic = "Владимировна",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-4.jpg",
                            Profile = "team-7.jpg",
                            Region = "Краснодарский край",
                            SecurityStamp = "",
                            Sex = 1,
                            Surname = "Порожняк",
                            TrainerPhoto = "trainer-1-3.jpg",
                            Trophy = "Чемпионка Краснодарского края 2022 года",
                            TwoFactorEnabled = false,
                            UserName = "trainer2"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Avatar = "avatar-2.jpg",
                            City = "Ростов-на-Дону",
                            ConcurrencyStamp = "590472ea-55ea-49e2-b011-7d36f696548d",
                            Country = "Россия",
                            DateBirthday = new DateTime(1984, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@trainer.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Мурат",
                            NormalizedEmail = "TRAINER@TRAINER.RU",
                            NormalizedUserName = "TRAINER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ+/x+i4j4pEuQ/kUtvs1KK/0a0pZNoXv27Ua5zawb36wZwQ7fKYyU3rlZ3PtAWiqQ==",
                            Patronymic = "Муратович",
                            PhoneNumberConfirmed = false,
                            PreviewTrainerPhoto = "trainer-5.jpg",
                            Profile = "team-8.jpg",
                            Region = "Ростовская область",
                            SecurityStamp = "",
                            Sex = 0,
                            Stage = 10,
                            Surname = "Болотчиев",
                            TrainerPhoto = "trainer-1-4.jpg",
                            TwoFactorEnabled = false,
                            UserName = "trainer3"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8472023-5dba-4818-8e56-b9b63a454a6a",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@user.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.RU",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKHCII7iAN9WMXOg5yQsry81hye9M3S06SGZYzS6YDDd5oMeOeotwPtrepAflIrqxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            City = "Краснодар",
                            ConcurrencyStamp = "54a1b51d-7a28-4f4f-8092-66873a7699f5",
                            Country = "Россия",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "name",
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEB1xYzSnGK2VIK8MlQ+R/O26gzHJQLfkZGeuhkgAEgv7Ln8tKUDHruvTI44U4T9A==",
                            PhoneNumberConfirmed = false,
                            Region = "Краснодарский край",
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a2e26c1-b021-4483-a01a-934ab09d9d22",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg7yekL3SJ0TA5mkOTgHAKctnEWoFHqqp7GzTDh1h1nQf1BZEDFU6DVUhcGN/Wq/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5274d07c-9e2b-4d9e-a48a-51a70a645e90",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1BHZncY2ay0IrZl/CFCnpcjQVK2BUeT0kXdcaFDbHSwn912AWcX13maTAi55eMnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student3"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f9796fb-3e13-4ccd-b601-fdf4a5257dd4",
                            DateBirthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@student.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@STUDENT.RU",
                            NormalizedUserName = "STUDENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLqc6uvkSJCOzC/bpCeW7Nj1EiZ0xP87M9fGWJGpZNVKNK7NzE4/Eg+vGSPTfEWrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sex = 0,
                            TwoFactorEnabled = false,
                            UserName = "student4"
                        });
                });

            modelBuilder.Entity("CG.Domain.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterPreviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ChapterVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavigationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterPreviewId");

                    b.HasIndex("ChapterVideoId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7545),
                            Description = "Прослушав курс вы поймете основные идеи данного гамбита, и историю возникновения. Узнаете кто из современников играет этот дебют.\r\n                                        Научитесь играть в комбинационные активные шахматы.",
                            Header = "",
                            Name = "Принятый северный гамбит",
                            NavigationTitle = "Основная идея гамбита"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7560),
                            Description = "Обсуждается возможный план игры в миттельшпиле. Основные плюсы и минусы данного дебюта.",
                            Header = "Глубокий разбор основных линий в дебюте, последнии новинки.",
                            Name = "Основные варианты дебюта",
                            NavigationTitle = "Основные варианты"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7571),
                            Description = "Расматривается основные возражения против северного гамбита. Способы уйти в удобные для черных линии.Обсуждается возможный план игры в миттельшпиле.",
                            Header = "",
                            Name = "Отказанный северный гамбит",
                            NavigationTitle = "Как защищаться черным в северном гамбите"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTimeCourse")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Purchases")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeCourse")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeCourse")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6527),
                            Currency = 0,
                            Description = "Один из острейших дебютов в шахматах, так как там с первых же ходов жертвуются две пешки. В данном видео рассматриваются ловушки за белых и черных, \r\n                        которых так много в представленном дебютном варианте. Изучив их, вы сможете вылавливать тех соперников, которые слабо знакомы с тонкостями \r\n                        Северного гамбита. К тому же многие из этих ловушек очень красивы, поэтому даже если вы не собираетесь применять данный вариант на практике, то все \r\n                        равно получите незабываемое эстетическое удовольствие от просмотра этого ролика.",
                            Duration = 120,
                            EndTimeCourse = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Северный гамбит",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeCourse = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeCourse = 0,
                            Views = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6554),
                            Currency = 0,
                            Description = "В курсе рассказывается как ставить ловушки в северном гамбите",
                            Duration = 60,
                            EndTimeCourse = new DateTime(2024, 8, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Ловушки в северном гамбите",
                            Price = 125m,
                            Purchases = 30,
                            StartTimeCourse = new DateTime(2024, 8, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeCourse = 0,
                            Views = 50
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ChapterId = 2,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ChapterId = 3,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OfferThumbNail")
                        .HasColumnType("bit");

                    b.Property<int>("TypeCourseFiles")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseFiles");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectoryCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "ffbb2c",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(5930),
                            Description = "",
                            Icon = "book",
                            IsActive = true,
                            ListOrder = 1,
                            Name = "Основы шахмат",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            Color = "5578ff",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(5952),
                            Description = "",
                            Icon = "door-open",
                            IsActive = true,
                            ListOrder = 2,
                            Name = "Дебют",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            Color = "e80368",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(5964),
                            Description = "",
                            Icon = "medium",
                            IsActive = true,
                            ListOrder = 3,
                            Name = "Миттельшпиль",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            Color = "e361ff",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(5977),
                            Description = "",
                            Icon = "door-closed",
                            IsActive = true,
                            ListOrder = 4,
                            Name = "Эндшпиль",
                            Url = ""
                        },
                        new
                        {
                            Id = 5,
                            Color = "47aeff",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(5988),
                            Description = "",
                            Icon = "shuffle",
                            IsActive = true,
                            ListOrder = 5,
                            Name = "Стратегия",
                            Url = ""
                        },
                        new
                        {
                            Id = 6,
                            Color = "ffa76e",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6000),
                            Description = "",
                            Icon = "star",
                            IsActive = true,
                            ListOrder = 6,
                            Name = "Тактика",
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            Color = "11dbcf",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6011),
                            Description = "",
                            Icon = "stop-circle-fill",
                            IsActive = true,
                            ListOrder = 7,
                            Name = "Матовые конструкции",
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            Color = "4233ff",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6022),
                            Description = "",
                            Icon = "stop-circle",
                            IsActive = true,
                            ListOrder = 8,
                            Name = "Патовые конструкции",
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            Color = "b2904f",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6033),
                            Description = "",
                            Icon = "textarea-t",
                            IsActive = true,
                            ListOrder = 9,
                            Name = "Тактические приемы",
                            Url = ""
                        },
                        new
                        {
                            Id = 10,
                            Color = "b20969",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6045),
                            Description = "",
                            Icon = "people-fill",
                            IsActive = true,
                            ListOrder = 10,
                            Name = "Чемпионы мира",
                            Url = ""
                        },
                        new
                        {
                            Id = 11,
                            Color = "ff5828",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6110),
                            Description = "",
                            Icon = "stack",
                            IsActive = true,
                            ListOrder = 11,
                            Name = "Литература",
                            Url = ""
                        },
                        new
                        {
                            Id = 12,
                            Color = "29cc61",
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6123),
                            Description = "",
                            Icon = "list-task",
                            IsActive = true,
                            ListOrder = 12,
                            Name = "Задачи",
                            Url = ""
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryStatusCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DirectoryStatusCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6288),
                            Description = "",
                            ListOrder = 1,
                            Name = "Опубликован"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6303),
                            Description = "",
                            ListOrder = 2,
                            Name = "В разработке"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6314),
                            Description = "",
                            ListOrder = 3,
                            Name = "На модерации"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6327),
                            Description = "",
                            ListOrder = 4,
                            Name = "Одобрен"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6340),
                            Description = "",
                            ListOrder = 5,
                            Name = "В продаже"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6352),
                            Description = "",
                            ListOrder = 6,
                            Name = "В архиве"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CG.Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7630),
                            Description = "Занимается онлайн года 4,5 точно. Тренеры Майя Порожняк и Мурат Болотчиев ❤️❤️❤️самые лучшие тренера! Активные, позитивные, интересные!",
                            Image = "testimonials-1.jpg",
                            ListOrder = 1,
                            Name = "Виктория Нос",
                            Rating = 5,
                            Title = "Мама ученика"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7644),
                            Description = "Сын занимается около полугода, очень доволен!\r\n                                    На урок всегда идет с удовольвствием. Тренеру Максиму Королёву - отдельная благодарность!",
                            Image = "testimonials-2.jpg",
                            ListOrder = 2,
                            Name = "Иван Савелов",
                            Rating = 5,
                            Title = "Отец ученика"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7656),
                            Description = "Занимается онлайн года 4,5 точно. Тренеры Майя Порожняк и Мурат Болотчиев ❤️❤️❤️самые лучшие тренера! Активные, позитивные, интересные!",
                            Image = "testimonials-3.jpg",
                            ListOrder = 3,
                            Name = "Виктория Нос",
                            Rating = 5,
                            Title = "Мама ученика"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7668),
                            Description = "Мой сын начал заниматься в шахматной школе почти год назад и мы просто в восторге от результатов! Каждое занятие не только увлекательно, но и полезно.",
                            Image = "testimonials-4.jpg",
                            ListOrder = 4,
                            Name = "Yana",
                            Rating = 4,
                            Title = "Мать ученика"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7680),
                            Description = "Рекомендую школу шахмат!\r\n                                    Там работают самые добрые , умные люди !",
                            Image = "testimonials-5.jpg",
                            ListOrder = 5,
                            Name = "Светлана Лацерда",
                            Rating = 5,
                            Title = "Ученица"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7696),
                            Description = "Это просто ужасно!Ужасный дебют, как можно такой дебют рекомендовать играть своим ученикам. ",
                            Image = "testimonials-5.jpg",
                            ListOrder = 6,
                            Name = "Денис Медведев",
                            Rating = 1,
                            Title = "Приобрел курс по дебюту Дамиано"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TariffsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffsId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6621),
                            Description = "Пробный урок",
                            Name = "Пробный урок"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6635),
                            Description = "Доступ к открытым курсам",
                            Name = "Доступ к открытым курсам"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6646),
                            Description = "Доступ к открытым вебинарам",
                            Name = "Доступ к открытым вебинарам"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6658),
                            Name = "Доступ к закрытым курсам"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6671),
                            Description = "Доступ к закрытым курсам",
                            Name = "Доступ к закрытым вебинарам"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6682),
                            Description = "Доступ к закрытым вебинарам, 10 вебинаров в месяц длительность 1 час 30 мин.",
                            Name = "Доступ к закрытым вебинарам, 10 вебинаров в месяц длительность 1 час 30 мин."
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6809),
                            Description = "Доступ к индивидуальным занятиям 10 занятий в месяц длительность 1 час 30 мин.",
                            Name = "Доступ к индивидуальным занятиям 10 занятий в месяц длительность 1 час 30 мин."
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7714),
                            Description = "Заголовок на главной странице на первом баннере",
                            Key = "HeaderMain",
                            Name = "Главный заголовок",
                            Section = "Headers",
                            Value = "Шахматная школа"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.StudentsTrainers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentsTrainers");
                });

            modelBuilder.Entity("CG.Domain.Entities.Tariffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdvanced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceMonth")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceYear")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicesIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7372),
                            Description = "Бесплатно",
                            IsAdvanced = false,
                            IsFeatured = false,
                            Name = "Бесплатно",
                            PriceMonth = 0m,
                            ServicesIds = "1;2;3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7451),
                            Description = "Самостоятельное обучение",
                            IsAdvanced = false,
                            IsFeatured = true,
                            Name = "Самостоятельное обучение",
                            PriceMonth = 3000m,
                            ServicesIds = "1;2;3;4;5"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7468),
                            Description = "Групповые занятия",
                            IsAdvanced = false,
                            IsFeatured = false,
                            Name = "Групповые занятия",
                            PriceMonth = 7000m,
                            ServicesIds = "1;2;3;4;5;6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(7524),
                            Description = "Индивидуальные занятия",
                            IsAdvanced = true,
                            IsFeatured = false,
                            Name = "Индивидуальные занятия",
                            PriceMonth = 12000m,
                            ServicesIds = "1;2;3;4;5;6;7"
                        });
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTimeWebinar")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Purchases")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimeWebinar")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeAccess")
                        .HasColumnType("int");

                    b.Property<int>("TypeWebinar")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Webinars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 30,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6581),
                            Currency = 0,
                            Description = "Майя Порожняк расскажет вам про один из самых романтических дебютов в Шахматной Истории, о северном гамбите, дебют, где белые жертвуют две пешки ради развития сверхмощной инициативы.",
                            Duration = 120,
                            EndTimeWebinar = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Северный гамбит",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeWebinar = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeAccess = 0,
                            TypeWebinar = 0,
                            Views = 50
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 30,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 12, 3, 20, 6, 32, 629, DateTimeKind.Utc).AddTicks(6601),
                            Currency = 0,
                            Description = "Роль шахмат в развитии интуиции и творческого мышления учащихся",
                            Duration = 120,
                            EndTimeWebinar = new DateTime(2024, 8, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Likes = 25,
                            Name = "Шахматная интуиция",
                            Price = 165m,
                            Purchases = 30,
                            StartTimeWebinar = new DateTime(2024, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 5,
                            TrainerId = "3",
                            TypeAccess = 0,
                            TypeWebinar = 0,
                            Views = 50
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CG.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test.Domain.Entities.LichessUsers", b =>
                {
                    b.HasOne("test.Domain.Entities.PerfsLichess", "Perfs")
                        .WithMany()
                        .HasForeignKey("PerfsId");

                    b.HasOne("test.Domain.Entities.ProfileLichess", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Perfs");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("test.Domain.Entities.PerfsLichess", b =>
                {
                    b.HasOne("test.Domain.Entities.PerfsStatisticsLichess", "Blitz")
                        .WithMany()
                        .HasForeignKey("BlitzId");

                    b.HasOne("test.Domain.Entities.PerfsStatisticsLichess", "Bullet")
                        .WithMany()
                        .HasForeignKey("BulletId");

                    b.HasOne("test.Domain.Entities.PerfsStatisticsLichess", "Classical")
                        .WithMany()
                        .HasForeignKey("ClassicalId");

                    b.HasOne("test.Domain.Entities.PerfsStatisticsLichess", "Rapid")
                        .WithMany()
                        .HasForeignKey("RapidId");

                    b.Navigation("Blitz");

                    b.Navigation("Bullet");

                    b.Navigation("Classical");

                    b.Navigation("Rapid");
                });

            modelBuilder.Entity("test.Domain.Entities.WebinarFiles", b =>
                {
                    b.HasOne("CG.Domain.Entities.Webinar", "Webinar")
                        .WithMany("WebinarFiles")
                        .HasForeignKey("WebinarId");

                    b.Navigation("Webinar");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.HasOne("test.Domain.Entities.LichessUsers", "LichessUsers")
                        .WithMany()
                        .HasForeignKey("LichessUserId");

                    b.HasOne("CG.Domain.Entities.StudentsTrainers", null)
                        .WithMany("Students")
                        .HasForeignKey("StudentId");

                    b.HasOne("CG.Domain.Entities.StudentsTrainers", null)
                        .WithMany("Trainers")
                        .HasForeignKey("TrainerId");

                    b.Navigation("LichessUsers");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUserRole", b =>
                {
                    b.HasOne("CG.Domain.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CG.Domain.Entities.Chapters", b =>
                {
                    b.HasOne("CG.Domain.Entities.CourseFiles", "ChapterPreview")
                        .WithMany()
                        .HasForeignKey("ChapterPreviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Chapters_PreviewCourseFiles_FK1");

                    b.HasOne("CG.Domain.Entities.CourseFiles", "ChapterVideo")
                        .WithMany()
                        .HasForeignKey("ChapterVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Chapters_VideoCourseFiles_FK1");

                    b.Navigation("ChapterPreview");

                    b.Navigation("ChapterVideo");
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.HasOne("CG.Domain.Entities.DirectoryCategory", "DirectoryCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.DirectoryStatusCourses", "DirectoryStatusCourses")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId");

                    b.Navigation("DirectoryCategory");

                    b.Navigation("DirectoryStatusCourses");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseDetails", b =>
                {
                    b.HasOne("CG.Domain.Entities.Chapters", "Chapters")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapters");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CG.Domain.Entities.CourseFiles", b =>
                {
                    b.HasOne("CG.Domain.Entities.Course", "Course")
                        .WithMany("CourseFiles")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CG.Domain.Entities.Service", b =>
                {
                    b.HasOne("CG.Domain.Entities.Tariffs", null)
                        .WithMany("Services")
                        .HasForeignKey("TariffsId");
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.HasOne("CG.Domain.Entities.DirectoryCategory", "DirectoryCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.Entities.DirectoryStatusCourses", "DirectoryStatusCourses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CG.Domain.ApplicationUser", "Trainer")
                        .WithMany("Webinars")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectoryCategory");

                    b.Navigation("DirectoryStatusCourses");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CG.Domain.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CG.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserRoles");

                    b.Navigation("Webinars");
                });

            modelBuilder.Entity("CG.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("CourseFiles");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CG.Domain.Entities.DirectoryStatusCourses", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CG.Domain.Entities.StudentsTrainers", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("CG.Domain.Entities.Tariffs", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CG.Domain.Entities.Webinar", b =>
                {
                    b.Navigation("WebinarFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
