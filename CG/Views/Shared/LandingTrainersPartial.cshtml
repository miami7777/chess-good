@using CG.Domain
@using CG.Domain.Enum
@using CG.Helpers
@using CG.Models.Enum
@model (List<ApplicationUser>,PrefixTypeBlock)
@{
    var headers = ViewData["Headers"] != null ? (SettingsViewModel)ViewData["Headers"] : new SettingsViewModel();
    List<ChessTitle> noTitul = new List<ChessTitle>
    {
      ChessTitle.Category1,
      ChessTitle.Category2,
      ChessTitle.Category3,
      ChessTitle.CategoryYoung3,
      ChessTitle.CategoryYoung2,
      ChessTitle.CategoryYoung1,
      ChessTitle.None
    };
    var avatar = "default.jpg";    
}
  <!-- Trainers Index Section -->
        @if (Model.Item2 == PrefixTypeBlock.Trainers)
        {
            <section id="trainers" class="section trainers">
                <div class="container">
            <div class="row gy-5">
                @{
                    foreach (var item in Model.Item1)
                    {                        
                        var avatarId = item.AvatarFilesId ?? 0;
                        <div class="col-lg-4 col-md-6 member" data-aos="fade-up" data-aos-delay="100">
                            <div class="member-img">
                                @{
                                    if (avatarId != 0)
                                    {
                                        <img src="@(Url.Action("DownloadThumb", "Home", new { id = avatarId }, System.Configuration.ConfigurationManager.AppSettings["httpschema"]))" class="img-fluid" alt="">                                            
                                        
                                    }
                                    else
                                    {
                                        <img src="~/assets/assets/img/team/@avatar" class="img-fluid" alt="">                                        
                                    }
                                }                            
                            </div>
                            <div class="member-info text-center">
                                <h4>@item.UserName</h4>
                                <span>@(item.ChessTitle.HasValue && !noTitul.Contains((ChessTitle)item.ChessTitle) ? item.ChessTitle : "")</span>
                                <p>@($"{(item.ChessTitle.HasValue && !noTitul.Contains((ChessTitle)item.ChessTitle) ? EnumHelper.GetDescriptionEnum(item.ChessTitle) : (headers.settingsHeaders.TryGetValue("TrainersTitle", out string TrainersTitle) ? TrainersTitle : ""))} {item.Trophy}")</p>
                            </div>
                        </div>

                        <!-- End Team Member -->
                    }
                }
            </div>
        </div>
        </section>
        }
        else if (Model.Item2 == PrefixTypeBlock.None)
        {
    <section id="trainers-index" class="section trainers-index">

        <div class="container">
            <div class="row">
                @{
                    foreach (var item in Model.Item1)
                    {
                        var avatarId = item.AvatarFilesId ?? 0;
                        
                        <div class="col-lg-4 col-md-6 d-flex" data-aos="fade-up" data-aos-delay="100">
                            <div class="member">
                                @if (avatarId != 0)
                                {
                                    <img src="@(Url.Action("DownloadThumb", "Home", new { id = avatarId }, System.Configuration.ConfigurationManager.AppSettings["httpschema"]))" class="img-fluid" alt="">
                                }
                                else
                                {
                                    <img src="~/assets/assets/img/trainers/@avatar" class="img-fluid" alt="">
                                }
                                <div class="member-content">
                                    <h4>@item.UserName</h4>
                                    <span>@item.City</span>
                                    <p>
                                        @($"{(item.ChessTitle.HasValue && !noTitul.Contains((ChessTitle)item.ChessTitle) ? item.ChessTitle : "")} {(item.ChessTitle.HasValue && !noTitul.Contains((ChessTitle)item.ChessTitle) ? EnumHelper.GetDescriptionEnum(item.ChessTitle) : (headers.settingsHeaders.TryGetValue("TrainersTitle", out string TrainersTitle) ? TrainersTitle : ""))} {item.Trophy}")
                                    </p>                                    
                                </div>
                            </div>
                        </div><!-- End Team Member -->
                    }
                }

        </div>
        </div>
        </section>
        }
    <!-- /Trainers Index Section -->

  

   
